(*****************************************************************************
 *
 *  @mainpage Числа Фибоначчи. Рабочая версия. 
 *      Ввод ограничения с клавиатуры. Увеличиваем размерность.
 *
 *  @section ОПИСАНИЕ
 *      Выводит на экран числа Фибоначчи с первого по n-тое.
 *
 *      @subsection ЗАДАЧА
 *          Требуется вывести на экран числа Фибоначчи с первого по n-тое,
 *          в формате
 *              `номер` -> `число`
 *          Каждая пара (`номер`, `число`) должны быть на отдельной строке.
 *          В лабораторных работах здесь требуется указать номер лабораторной
 *          и номер варианта.
 *
 *      @subsection АЛГОРИТМ
 *          В цикле по вычисляем числа Фибоначчи по определению:
 *              φ(1) = 1;
 *              φ(2) = 1;
 *              φ(n) = φ(n-1) + φ(n-2), n ≥ 3.
 *
 *  @section ЛИЦЕНЗИЯ (GPL)
 *      Данная программа является свободным программным обеспечением;
 *      вы можете распространять и/или изменять его в соответствии
 *      с условиями лицензии GPL, опубликованной
 *      Free Software Foundation либо Лицензии второй версии,
 *      либо (по вашему выбору) любой более поздней версии.
 *      Эта программа распространяется в надежде, что она будет полезной,
 *      но БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, даже без подразумеваемых гарантий
 *      КОММЕРЧЕСКОЙ ЦЕННОСТИ или ПРИГОДНОСТИ ДЛЯ КОНКРЕТНЫХ ЦЕЛЕЙ.
 *      Смотрите GNU General Public License для более подробной информации
 *      на http://www.gnu.org/copyleft/gpl.html
 *
 *  @file ws01_fib05.pas
 *      Основной файл программы, именно его и нужно компилировать.
 *
 *  @package ws01_fib05
 *      Основной модуль программы,
 *      выводит на экран числа Фибоначчи с первого по n-тое.
 *      Рабочая версия программы.
 *
 *  @author     Илья w-495 Никитин <w@w-495.ru>
 *  @date       2013.02.21 13:10:01
 *  @version    0.4.0
 *
 *****************************************************************************)

program ws01_fib05;

(*****************************************************************************
                ОБЪЯВЛЕНИЯ КОНСТАНТ И ПЕРЕМЕННЫХ
 *****************************************************************************)

(**
    @var    limit   Количество итераций цикла.
            Показывает, до какого предела нам нужно считать числа Фибоначчи.
            limit   ∈ byte = [0, 255];
            byte занимает 1 байт.
            ПРОБЛЕМА:
                Вводимое число не может быть больше 46.
                Из-за ограничения в `curr` и `prev` ∈ [1, 2147483647],
                числа Фибоначчи по номеру больше 46 считаются неправильно:
                происходит целочисленное переполнение.
**)
var limit : byte;

(**
    @var    counter Счетчик цикла
            counter ∈ integer = [0, 255];
            byte занимает 1 байт.
**)
var counter : byte;

(**
    @var    curr    Текущее значение числа Фибоначчи, на данной итерации.
            curr    ∈ longint = [-2147483648, 2147483647];
            longint занимает 4 байта.
**)
var curr    : longint;

(**
    @var    prev    Предыдущее значение числа Фибоначчи, на данной итерации.
            prev    ∈ longint = [-2147483648, 2147483647];
            longint занимает 4 байта.
**)
var prev    : longint;

(**
    @var    temp    Временная переменная для обмена значениями.
            temp    ∈ longint = [-2147483648, 2147483647];
            longint занимает 4 байта.
**)
var temp    : longint;

(*****************************************************************************
                АЛГОРИТМИЧЕСКАЯ ЧАСТЬ ПРОГРАММЫ
 *****************************************************************************)

begin
    (**
        Считываем число из входного потока,
        и кладем его в переменную `limit`.
    **)
    readln(limit);
    (**
        Присваиваем предыдущему значению 1.
    **)
    prev := 1;
    (**
        Присваиваем текущему значению 1.
    **)
    curr := 1;
    (**
        Выводим первое и второе числа Фибоначчи.
    **)
    writeln(1, ' -> ', 1);
    writeln(2, ' -> ', 1);
    (**
        В цикле присваиваем переменной `curr` сумму старого значения `curr` 
        и значение `prev`. А `prev` присваиваем старое значение `curr`.
        Таким образом мы сдвигаем `prev` и `curr` по нашей последовательности.
        Логически `prev` всегда остается предыдущим,
        а `curr` текущем числом Фибоначчи.
    **)
    for counter := 3 to limit do begin
        (**
            В temp запоминаем предыдущее состояние curr.
            Иначе мы его потеряем, т.к. значение curr меняется.
        **)
        temp := curr;
        curr := prev + curr;
        prev := temp;
        (**
            Выводим очередную пару (`номер`, `число`).
        **)
        writeln(counter, ' ->  ', curr);
    end
end.
