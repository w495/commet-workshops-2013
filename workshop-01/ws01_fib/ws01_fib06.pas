(*****************************************************************************
 *
 *  @mainpage Числа Фибоначчи. Рабочая версия. Массив.
 *
 *  @section ОПИСАНИЕ
 *      Выводит на экран числа Фибоначчи с первого по n-тое.
 *
 *      @subsection ЗАДАЧА
 *          Требуется вывести на экран числа Фибоначчи с первого по n-тое,
 *          в формате
 *              `номер` -> `число`
 *          Каждая пара (`номер`, `число`) должны быть на отдельной строке.
 *          В лабораторных работах здесь требуется указать номер лабораторной
 *          и номер варианта.
 *
 *      @subsection АЛГОРИТМ
 *          В цикле по вычисляем числа Фибоначчи по определению:
 *              φ(1) = 1;
 *              φ(2) = 1;
 *              φ(n) = φ(n-1) + φ(n-2), n ≥ 3.
 *
 *  @section ЛИЦЕНЗИЯ (GPL)
 *      Данная программа является свободным программным обеспечением;
 *      вы можете распространять и/или изменять его в соответствии
 *      с условиями лицензии GPL, опубликованной
 *      Free Software Foundation либо Лицензии второй версии,
 *      либо (по вашему выбору) любой более поздней версии.
 *      Эта программа распространяется в надежде, что она будет полезной,
 *      но БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, даже без подразумеваемых гарантий
 *      КОММЕРЧЕСКОЙ ЦЕННОСТИ или ПРИГОДНОСТИ ДЛЯ КОНКРЕТНЫХ ЦЕЛЕЙ.
 *      Смотрите GNU General Public License для более подробной информации
 *      на http://www.gnu.org/copyleft/gpl.html
 *
 *  @file ws01_fib06.pas
 *      Основной файл программы, именно его и нужно компилировать.
 *
 *  @package ws01_fib06
 *      Основной модуль программы,
 *      выводит на экран числа Фибоначчи с первого по n-тое.
 *      Рабочая версия программы.
 *
 *  @author     Илья w-495 Никитин <w@w-495.ru>
 *  @date       2013.02.21 13:10:01
 *  @version    0.4.0
 *
 *****************************************************************************)

program ws01_fib06;

(*****************************************************************************
                ОБЪЯВЛЕНИЯ КОНСТАНТ И ПЕРЕМЕННЫХ
 *****************************************************************************)

(**
    @const MAXRANGE Максимальный возможный номер числа Фибоначчи.
**)
const MAXRANGE = 46;

(**
    @var    fibar Массив с числами Фибоначчи.
            fibar ∈ array[1..46];
            longint занимает 4 байта.
            Ввод массива позволяет нам работать с числами Фибоначчи 
            естественно, почти как по определению.
            Переменные `prev`, `curr`, `temp` становятся не нужны.
**)
var fibar : array[1..MAXRANGE] of longint;

(**
    @var    limit   Количество итераций цикла.
            Показывает, до какого предела нам нужно считать числа Фибоначчи.
            limit   ∈ byte = [0, 255];
            byte занимает 1 байт.
            ПРОБЛЕМА:
                Вводимое число не может быть больше 46.
                Из-за ограничения в `curr` и `prev` ∈ [1, 2147483647],
                числа Фибоначчи по номеру больше 46 считаются неправильно:
                происходит целочисленное переполнение.
                Решить проблему можно введя явную проверку в программе.
                Такого рода проверки называют «защитой от дурака».
**)
var limit : byte;

(**
    @var    counter Счетчик цикла
            counter ∈ integer = [0, 255];
            byte занимает 1 байт.
**)
var counter : byte;

(*****************************************************************************
                АЛГОРИТМИЧЕСКАЯ ЧАСТЬ ПРОГРАММЫ
 *****************************************************************************)

begin
    (**
        Считываем число из входного потока,
        и кладем его в переменную limit.
    **)
    readln(limit);
    (**
        Умный в гору не пойдет — умный гору обойдет.
        Мы не можем вычислять числа Фибоначчи с номером больше чем 46.
        Но, мы можем сделать явную проверку,
        чтобы предотвратить такой случай.
    **)
    if ((1 > limit) or (limit > MAXRANGE)) then
        writeln('error: outofrange')
    else begin
        (**
            Присваиваем предыдущему значению 1.
        **)
        fibar[1] := 1;
        (**
            Присваиваем текущему значению 1.
        **)
        fibar[2] := 1;
        (**
            В цикле присваиваем текущей ячейке массива сумму предыдущего 
            и пред-предыдущего элемента. Получается, как по определению
                φ(n) = φ(n-1) + φ(n-2), n ≥ 3.
            Мы смогли отказаться от `prev` и `curr` потому, что их роль выполняют
            соответствующие ячейки массива. А от `temp` мы смогли отказаться, 
            т.к. нет необходимости хранить старое значение `curr`.
            Мы его получаем на следующей итерации автоматически.
            Таким образом,
            Новое значение `curr`   это `fibar[counter]`;
            Старое значение `curr`  это `fibar[counter-1]`;
            Старое значение `prev`  это `fibar[counter-2]`;
            А Новое значение `prev` это `fibar[counter-1]`;
        **)
        for counter := 3 to limit do
            fibar[counter] := fibar[counter-1] + fibar[counter-2];
        (**
            В цикле выводим очередную пару (`номер`, `число`).
        **)
        for counter := 1 to limit do
            writeln(counter, ' ->  ', fibar[counter]);
    end {if}
end.


