(*****************************************************************************
 *
 *  @mainpage Инвертирование целого пятизначного числа.
 *
 *  @section ОПИСАНИЕ
 *      Программа инвертирует целое пятизначное число.
 *      Считывает со стандартного потока целое число, до перевода строки.
 *      Возвращает число с обратным порядком цифр к исходному.
 *      Входное число должно быть из диапазона от 10000 до 99999.
 *
 *      @subsection ЗАДАЧА
 *          Требуется инвертировать целое число так, чтобы порядок цифр
 *          был обратным. Например, 12345 => 54321.
 *          Решить задачу требуется в частном случае пятизначного числа.
 *          В лабораторных работах здесь требуется указать номер лабораторной
 *          и номер варианта.
 *
 *      @subsection АЛГОРИТМ
 *          Самым простым вариантом решения было бы просто забить результат
 *          набором `if then else` для различных пятизначных чисел.
 *          Их всего лишь 89999 штук. Однако, поступим хитрее.
 *          В позиционной системе счисления представляет последовательный
 *          набор коэффициентов своих разрядов.
 *              12345 =
 *                  = (1 × 10000) + (2 × 1000) + (3 × 100) + (4 × 10) +  5 =
 *                  = ((((((1 × 10 + 2) × 10) + 3) × 10) + 4) × 10) +  5.
 *          В нашем случае, требуется записать эти коэффициенты в обратном
 *          порядке. Таким образом, получаем алгоритм:
 *              1. Cчитать число q.
 *              2. Поделить q на основание системы счисления (10).
 *              3. Остаток от деления вывести.
 *              4. Присвоить q частное от деления.
 *              5. Повторить 5 раз с шага 2.
 *
 *  @section ЛИЦЕНЗИЯ (BSD)
 *      © 2013 Илья w-495 Никитин, кафедра 806, МАИ, «Комета».
 *      Разрешается повторное распространение и использование как
 *      в виде исходного кода, так и в двоичной форме,
 *      с изменениями или без, при соблюдении следующих условий:
 *          *   при повторном распространении исходного кода должно оставаться
 *              указанное выше уведомление об авторском праве,
 *              этот список условий и последующий отказ от гарантий;
 *          *   при повторном распространении двоичного кода должна
 *              сохраняться указанная выше информация об авторском праве,
 *              этот список условий и последующий отказ от гарантий
 *              в документации и/или в других материалах,
 *              поставляемых при распространении;
 *          *   ни название организации, ни имена ее сотрудников
 *              не могут быть использованы в качестве поддержки
 *              или продвижения продуктов, основанных на этом ПО
 *              без предварительного письменного разрешения.
 *      Эта программа предоставлена владельцами авторских прав и/или
 *      другими сторонами «как она есть» без какого-либо вида гарантий,
 *      выраженных явно или подразумеваемых, включая, но не ограничиваясь ими,
 *      подразумеваемые гарантии коммерческой ценности и пригодности
 *      для конкретной цели. Ни в коем случае ни один владелец авторских
 *      прав и ни одно другое лицо, которое может изменять и/или повторно
 *      распространять программу, как было сказано выше,
 *      не несёт ответственности, включая любые общие,
 *      случайные, специальные или последовавшие убытки,
 *      вследствие использования или невозможности использования программы
 *      (включая, но не ограничиваясь потерей данных, или данными,
 *      ставшими неправильными, или потерями принесенными из-за вас
 *      или третьих лиц, или отказом программы работать совместно
 *      с другими программами),  даже если такой владелец
 *      или другое лицо были извещены о возможности таких убытков.
 *
 *  @file invert_12345.pas
 *      Основной файл программы, именно его и нужно компилировать.
 *
 *  @package invert_12345
 *      Основной модуль программы, инвертирование целого числа.
 *      При запуске программы на вход подается положительное пятизначное число.
 *      На выходе будет тоже самое число, но с обратным порядком цифр.
 *
 *  @author     Илья w-495 Никитин <w@w-495.ru>
 *  @date       2013.02.22 16:50:10
 *  @version    1.1
 *
 *****************************************************************************)

program invert_12345;

(*****************************************************************************
                ОБЪЯВЛЕНИЯ КОНСТАНТ И ПЕРЕМЕННЫХ
 *****************************************************************************)

(**
    @const BASE Основание системы счисления.

    В алгоритме не него происходит целочисленное деление.
    В данной программе BASE ≡ 10.
    Выделение всех чисел в программе в константы — правило хорошего тона.
**)
const BASE = 10;


(**
    @const LIMIT Количество итераций цикла.

    В алгоритме деление осуществляется LIMIT раз.
    В данной программе LIMIT ≡ 5.
    Выделение всех чисел в программе в константы — правило хорошего тона.
**)
const LIMIT = 5;

(**
    @var quotient   Частное, оно же входное число.

        quotient ∈ longint = [-2147483648, 2147483647];
        longint занимает 4 байта.
**)
var quotient    :longint;

(**
    @var rest   Остаток целочисленного деления.

        Используется в промежуточных вычислениях,
        и для вывода инвертированного числа.
        quotient ∈ longint = [-2147483648, 2147483647];
        longint занимает 4 байта.
**)
var rest        :longint;

(**
    @var counter   Счетчик цикла

        counter ∈ byte = [0, 255];
        byte занимает 1 байт.
        В данном случае мы используем тип byte, а не longint,
        т.к. в данном случае не требуется иметь слишком большое число.
        Так мы сможем сэкономить немного памяти.
**)
var counter     :byte;

(** ************************************************************
                АЛГОРИТМИЧЕСКАЯ ЧАСТЬ ПРОГРАММЫ
 ** ********************************************************* **)

begin
    (**
        Считываем число из входного потока,
        которое хотим инвертировать
        и кладем его в переменную quotient.
    **)
    readln(quotient);
    (**
        В цикле вычисляем остаток от целочисленного деления на 10.
        10 — основание системы счисления.
        Записываем остаток в выходной поток.
        Делим нацело исходное число на основание,
        Присваиваем переменной частного результат целочисленного деления.
        Повторяем цикл 5 раз.
        Для деления используются целочисленные операции `mod` и `div`:
            7 div 3 = 2 — деление;
            5 mod 3 = 1 — взятие остатка;
            ⇐ 7 = 3 * 2 + 1.
    **)
    for counter := 1 to LIMIT do
    begin
        (** вычисляем остаток **)
        rest     := quotient mod BASE;
        (** вычисляем частное **)
        quotient := quotient div BASE;
        (** записываем остаток **)
        write(rest);
    end;
    (** перевод строки **)
    writeln();
end.
